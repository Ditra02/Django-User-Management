https://youtu.be/WuyKxdLcw3w

add crispy in installed apps settings (8:00)

remote posgress database setup (21:56)
    kita bisa setup database secara local dan tanpa ngehostingnya secara remote. tapi di video ini bakal ditunjukin
    cara host nya pake heroku (gratis). ngehost di heroku memungkinkan kita mengkoneksikan RETOOL dengan database.
    kita bakal bisa make dan memodif databasenya tanpa make django.

Gantinya Heroku
    https://youtu.be/HEV1PWycOuQ?si=hDxEqxUDN4qLA88z
    https://dev.to/dennisivy11/easiest-django-postgres-connection-ever-with-railway-11h6

    setup railway di settings.py 

    DATABASES = {
    'default': {        
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'railway',                               # PGDATABASE
        'USER': 'postgres',                              # PGUSER
        'PASSWORD': '*3a1agGbCEb-GFFAEeFbb3Gg*beAA1Cg',  # PGPASSWORD
        'HOST': 'monorail.proxy.rlwy.net',               # PGHOST
        'PORT': '50346',                                 # PGPORT
    }
}

RETOOL(28:00)

handle database connections from RAILWAY TO RETOOL(30.14)

Writing sql queries to show data(30:45)
    select * from pg_catalog.pg_tables # show all tables inside our database

Creating django auth | User regis and signin(33:12)
    include('', include('django.contrib.auth.urls')), in urls.py


    prebuit urls things such as login, logout etc like below. all we need to allow that one line code
    works is to create html template for them

        '''
    The URLs provided by django.contrib.auth.urls are

    [what ever]/login/ [name='login']
    [what ever]/logout/ [name='logout']

    [what ever]/password_reset/ [name='password_reset']
    [what ever]/password_reset/done/ [name='password_reset_done']

    [what ever]/password_change/ [name='password_change']
    [what ever]/password_change/done/ [name='password_change_done']

    [what ever]/reset/<uidb64>/<token>/ [name='password_reset_confirm']
    [what ever]/reset/done/ [name='password_reset_complete']
    '''

    For example 
    Login route yang di sediain sama django bakal ngerender template login lewat urlnya
    
    Jadi, intinya 1 line code itu bakal ngerender spesifik html template yang bakal di arahin
    sama spesifik urlnya (url ini udh punya parameter 'name' kita tinggal panggil kek diatas)


    Menggunakan prebuiltin login url dengan template login(34:43)

        apa yang sebenarnya kita pengen dari login form adalah kita ingin menampilkan
        sebuah form yang udh disediain ama django. inililah alasan kita menggunakan 
        'crispy form'.

        lambang pipe atau '|' melambangkan django filter. dengan adanya ini brati ngaktifin 
        filter ini 

    
    ERROR terkait cispy form (40.03)
        tambain ini di settings.py

        CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

        CRISPY_TEMPLATE_PACKS = "bootstrap5"

    menambahkan login redirect di settings.py(41:31)
        ini bakal set kalo kita udah berhasil login mau diarahin ke mana 

    membuat register form (42:40)
        user = User.objects.create_user("john", "lennon@thebeatles.com", "johnpassword")

    extend usercreationform dari django di forms.py (45.30)

    making request or query in retool to show the user that registered in the website (52:11)

    how we view the user information that signed in (55:50)

    dealing with user permission and allowing spesific users to create post (58:33)


Creating Post (1:01:18)

viewing post and we can delete a post if we create it (1:13:22)
    displaying all of the post in home page (1:13:41)

        1:14:57

    create two button
        1. button to delete
        2. button to ban the user 

        we want to show that button to the people that have the ability to delete a post
        and to people that could ban a user (1:17:40)

Group and User Permission (1:25:56)
    assigning user to different group and looking at specific permissions and handle page access permissions.

    kita akan membuat grup baru. grup ini akan menjadi mod grup. dan akan dibuat 
    juga default grup. 
    
    default grup ini punya kemampuan untuk membuat post dan menghapus post nya sendiri.
    kalo default user ini di banned. user ini ga bakal bisa ngepost lagi 

    mod grup bakal punya  kemampuan untuk menghapus semua post, tapi ga bisa banned akun user 

    admin grup bisa ban user dan bisa hapus semua post

    Create super user (1:27:24)
    
    create grup in django admin (1:29:09)

        https://medium.com/djangotube/django-roles-groups-and-permissions-introduction-a54d1070544

    Penjelasan mengenai permission berkaitan dengan kemampuan user (1:29:40)
        setiap model yang kita tambahkan ke django, custom model punya kita dalam project ini 
        contonhya. lalu Post model. model tersebut akan secara secara default akan membuat
        permission object. permission itu adalah add, view, change dan delete.

        misalya kita tambahkan sebuah permission pada sebuah grup, maksudnya bahwa setiap
        user, bagian dari grup tersebut punya permission yang sama. Namun, django tidak 
        melakukan apapun terhadap permission yang sudah diset. django ngga bakal melarang
        sebuah user melakukan sesuatu. yang membatasi user dengan permission adalah developer nya 


    menambahkan user ke suatu grup di django admin (1:31:16)
    
    membuat grup beserta permissionnya dengan koding (1:31:59)
        jalankan venv lalu py manage.py shell lalu ketikan 
            from django.contrib.auth.models import Group, Permission, User
            from django.contrib.contenttypes.models import ContentType

            lalu kita dapat membuat grup dengan | disini mod adalah nama grupnya
                mod, created = Group.objects.get_or_create(name="mod")

            kita bisa mengatur permissionnya dengan liat dulu permission yang ada di form atau model terkait
            . misalnya dalam kasus ini kita akan mengatur permission pada grup default terkait dengan Post model 
            (1:34:10)

                from main.models import Post 
                ct = ContentType.objects.get_for_model(model=Post)

            liat semua permission dari model Post yang dapat diatur dalam sebuah grup (1:34:42)
                perms = Permission.objects.filter(content_type=ct)
                perms.all()

            menambahkan permission yang sudah diliat ke  grup(1:35:20)
                mod.permissions.add(*perms) # ini adalah cara menambahkan semua permission yang ada di model

                mod.permissions.add(perms[<index>]) # jika ingin menambahkan secara satu persatu maka gantilah <index>
                                                    # dengan index permission sesuai dengan urutan pada perms.all()

                mod.permissions.add(perms[0], perms[1])
            
            untuk liat permission yang udah di atur di grup nya bisa 
                mod.permissions.all()

            untuk hapus permission yang udah diatur bisa
               ! mod.permissions.all()[<index>]  # ganti <index> sesuai index permisionnya di mod.permissions.all()
               ! niat hapus permission di grup nya aja ko malah permissiosn di model post nya juga ilang

                django.pdf page 528
               print(perms.all()[0].name)
               print(perms.all()[0].codename)
               print(perms.all()[0].content_type)

               content_type = ContentType.objects.get_for_model(BlogPost)
               permission = Permission.objects.create(
               codename="can_publish",
               name="Can Publish Posts",
               content_type=content_type,
               )
        
            menambahkan user kedalam sebuah grup (1:36:17)
                user = User.objects.filter(username="<siapa usernya>")
                mod.user_set.add(user.first())
            
            Melihat user yang udah ada dalam Group 
                mod = Group.objects.get(name="mod")
                users = mod.user_set.all()

                for user in users:
                    print(f"Username: {user.username}")

                atau 

                users = User.objects.filter(groups__name="mod")

                for user in users:
                    print(f"Username: {user.username}")
            
            Hitung user yang ada dalam grup
                mod = Group.objects.get(name="mod")
                user_count = mod.user_set.count()

                print(f"Number of users in 'mod' group: {user_count}")


            Membuat fitur di retool untuk memudahkan menambahkan user ke dalam grup
            dan untuk melihat di grup mana user itu    (1:38:42) 

                di tabel user_grup ada id dan nama grup nya
                di tabel auth_user_groups ada user_id dan grup_id

                SQL query di railway (1:40:00)
                    select * from auth_user LEFT JOIN auth_user_groups ON auth_user.id = auth_user_groups.user_id

                    tampilkan semua kolom tabel auth_user di left join dengan tabel auth_user_groups
                    di join berdasarkan user id

                    mengganti grup id dengan nama grup nya (1:42:00)

                        select 
                            auth_user.username, auth_group.name as group_name  
                        FROM 
                            auth_user 
                        LEFT JOIN 
                            auth_user_groups 
                        ON 
                            auth_user.id = auth_user_groups.user_id 
                        LEFT JOIN 
                            auth_group 
                        ON 
                            auth_user_groups.group_id = auth_group.id
                    

                    membuat sebuah form di retool yang memungkinkan kita untuk mengubah grup sebuah user (1:44:35)

                        Java Script transformer (1:47:10)
                            ini untuk transform data ke berbagai format pake Js 
                        
                        membuat query untuk tombol submit pada form (1:49:29)
                            ? input
                            INSERT INTO 
                                auth_user_groups (user_id, group_id)
                            VALUES 
                                ({{ userForm.data.user }}, {{ userForm.data.group }})

                            ? update 
                            UPDATE
                                auth_user_groups
                            SET
                                group_id = {{userForm.data.group}}
                            WHERE
                                user_id = {{userForm.data.user}}

                        menambahkan event handlers kalo formnya berhasil dan gagal (1:52:08)
    

    Bagaimana cara membatasi akses page dan akses model berdasarkan permission yang dimiliki user
    terhadap model (1:53:32)
        # @permission_required("<code name dari permission terkait model>")

        untuk permission terkait model diatas bisa dilihat dengan ke shell trus 
            from django.contrib.auth.models import Group, Permission, User
            from django.contrib.contenttypes.models import ContentType

            from main.models import Post 
            ct = ContentType.objects.get_for_model(model=Post)

            perms = Permission.objects.filter(content_type=ct)
            perms.all()

            for perm in perms.all():
                print(perm.codename)


        @permission_required("add_post", login_url='/login', raise_exception=True)
        kalo ga punya permission bakal raise_exception



(1:53:25)


